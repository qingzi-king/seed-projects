{"version":3,"sources":["routes/global.js","stores/index.js","routes/AsyncComponent.js","routes/index.js","serviceWorker.js","index.js"],"names":["global","G_SERVER_HOST","G_SYSTEM_TITLE","name","subName","welcome","G_SPLIT_URL_PARAMS","inputValue","option","window","location","pathname","split","filter","Boolean","G_DATE_FORMAT","time","type","defaultValue","dayjs","format","G_ENUM","projectStatus","value","label","modularAuthStatus","projectStages","projectTypes","asyncComponent","importComponent","props","state","component","default","this","setState","C","Component","App","Demo","configRoutes","path","exact","main","Routes","stores","map","route","index","key","hostname","match","ReactDOM","render","locale","zhCN","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sLAAA,iCAOAA,EAAOC,cAAgB,wBAEvBD,EAAOE,eAAiB,CACtBC,KAAM,yDACNC,QAAS,yDACTC,QAAS,CACPF,KAAM,uBACNC,QAAS,sFAKbJ,EAAOM,mBAAqB,SAACC,EAAYC,GAIvC,OAHaC,OAAOC,SAASC,SACJC,MAAM,KAAK,GAAGA,MAAM,KAClBC,OAAOC,UAKpCd,EAAOe,cAAgB,SAACC,EAAMC,EAAMC,GAClC,OAAIF,EACW,cAATC,EACKE,IAAMH,GAAMI,OAAO,uBACR,qBAATH,EACFE,IAAMH,GAAMI,OAAO,oBACR,mBAATH,EACFE,IAAMH,GAAMI,OAAO,kBACR,SAATH,EACFE,IAAMH,GAAMI,OAAO,QACR,SAATH,EACFE,IAAMH,GAENG,IAAMH,GAAMI,OAAO,cAGrBF,GAAgB,KAK3BlB,EAAOqB,OAAS,CACdC,cAAe,CACb,CACEC,MAAO,SACPC,MAAO,gBAET,CACED,MAAO,WACPC,MAAO,sBAET,CACED,MAAO,WACPC,MAAO,sBAET,CACED,MAAO,SACPC,MAAO,sBAET,CACED,MAAO,UACPC,MAAO,uBAGXC,kBAAmB,CACjB,CACEF,MAAO,SACPC,MAAO,gBAET,CACED,MAAO,SACPC,MAAO,sBAET,CACED,MAAO,UACPC,MAAO,uBAGXE,cAAe,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAC1DC,aAAc,CAAC,6CAAW,qC,qJChFb,K,yDCJA,SAASC,EAAeC,GAyBrC,OAzBsD,kDAEpD,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAW,MAJI,EAFiC,kMAWbH,IAXa,gBAWjCG,EAXiC,EAW1CC,QAERC,KAAKC,SAAS,CACZH,UAAWA,IAdqC,qIAmBlD,IAAMI,EAAIF,KAAKH,MAAMC,UAErB,OAAOI,EAAI,kBAACA,EAAMF,KAAKJ,OAAY,SArBe,GACzBO,aCe/B,IAAMC,EAAMV,GAAe,kBAAM,8DAC3BW,EAAOX,GAAe,kBAAM,+DAK5BY,EAAe,CACnB,CACEC,KAAM,IACNC,OAAO,EACPC,KAAML,GAER,CACEG,KAAM,CAAC,WAAY,iBACnBC,OAAO,EACPC,KAbgBf,GAAe,kBAAM,6EAevC,CACEa,KAAM,CAAC,QAAS,cAChBC,OAAO,EACPC,KAjBaf,GAAe,kBAAM,+DAmBpC,CACEa,KAAM,QACNC,OAAO,EACPC,KAAMJ,GAER,CACEE,KAAM,IACNC,OAAO,EACPC,KA1BYf,GAAe,kBAAM,iEAgDtBgB,EAlBA,kBACb,kBAAC,IAAaC,EACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEIL,EAAaM,KAAI,SAACC,EAAOC,GACvB,OAAO,kBAAC,IAAD,CAAOC,IAAKD,EAAON,MAAOK,EAAML,MAAOD,KAAMM,EAAMN,KAAMT,UAAWe,EAAMJ,cC9CzE7B,QACW,cAA7BL,OAAOC,SAASwC,UAEe,UAA7BzC,OAAOC,SAASwC,UAEhBzC,OAAOC,SAASwC,SAASC,MACvB,2D,mBCMNC,IAASC,OAAO,uBAAgBC,OAAQC,KAAM,kBAAC,EAAD,OAA6BC,SAASC,eAAe,SD2G7F,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2d091e5.chunk.js","sourcesContent":["/*\n * @Descripttion: 全局配置（仅必要设成全局）\n * @Author: qingzi.wang\n * @Date: 2020-07-27 17:42:23\n */ \nimport dayjs from 'dayjs';\n\nglobal.G_SERVER_HOST = 'http://127.0.0.1:5000';\n\nglobal.G_SYSTEM_TITLE = {\n  name: '计划与任务管理平台',\n  subName: '富能通重庆研发中心',\n  welcome: {\n    name: 'Welcome to PTR！',\n    subName: '欢迎访问富能通（重庆）PTR平台'\n  }\n};\n\n// 拆分url的params部分\nglobal.G_SPLIT_URL_PARAMS = (inputValue, option) => {\n  let nowUrl = window.location.pathname;\n  let nowUrlArray = nowUrl.split('?')[0].split('/'); //根目录会是两个空串[\"\",\"\"]\n  let realKeys = nowUrlArray.filter(Boolean);\n  return realKeys;\n};\n\n// 时间格式化\nglobal.G_DATE_FORMAT = (time, type, defaultValue) => {\n  if (time) {\n    if (type === 'fullTimes') {\n      return dayjs(time).format('YYYY-MM-DD HH:mm:ss');\n    } else if (type === 'fullTimeToMinute') {\n      return dayjs(time).format('YYYY-MM-DD HH:mm');\n    } else if (type === 'fullTimeToMini') {\n      return dayjs(time).format('YYYYMMDDHHmmss');\n    } else if (type === 'year') {\n      return dayjs(time).format('YYYY');\n    } else if (type === 'self') {\n      return dayjs(time);\n    } else {\n      return dayjs(time).format('YYYY-MM-DD');\n    }\n  } else {\n    return defaultValue || '/';\n  }\n};\n\n// 项目相关枚举值\nglobal.G_ENUM = {\n  projectStatus: [\n    {\n      value: 'normal',\n      label: '正常'\n    },\n    {\n      value: 'finished',\n      label: '已结束'\n    },\n    {\n      value: 'inactive',\n      label: '未激活'\n    },\n    {\n      value: 'stoped',\n      label: '已停用'\n    },\n    {\n      value: 'deleted',\n      label: '已删除'\n    }\n  ],\n  modularAuthStatus: [\n    {\n      value: 'normal',\n      label: '正常'\n    },\n    {\n      value: 'stoped',\n      label: '已停用'\n    },\n    {\n      value: 'deleted',\n      label: '已删除'\n    }\n  ],\n  projectStages: ['开始', '机会', '立项', '设计', '开发', '交付', '维护', '结束'],\n  projectTypes: ['客户定制开发类', '公司运营类'],\n};","/*\n * @Descripttion: \n * @Author: qingzi.wang\n * @Date: 2020-07-27 17:20:29\n */ \n\nexport default {}","import React, { Component } from 'react';\n\nexport default function asyncComponent(importComponent) {\n  class AsyncComponent extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        component: null\n      };\n    }\n\n    async componentDidMount() {\n      const { default: component } = await importComponent();\n\n      this.setState({\n        component: component\n      });\n    }\n\n    render() {\n      const C = this.state.component;\n\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n\n  return AsyncComponent;\n}","/*\n * @Descripttion: \n * @Author: qingzi.wang\n * @Date: 2020-07-27 17:14:02\n */ \nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\nimport stores from '../stores/index';\n\nimport asyncComponent from './AsyncComponent';\n\n// import App from '../pages/App';\n// import Demo from '../pages/Demo';\n// import ConsoleUnit from '../pages/console/Home';\n// import PlanUnit from '../pages/plan/Home';\n// import NoMatch from '../pages/common/NoMatch';\n// const App = () => import('../pages/App');\nconst App = asyncComponent(() => import('../pages/App'));\nconst Demo = asyncComponent(() => import('../pages/Demo'));\nconst ConsoleUnit = asyncComponent(() => import('../pages/console/Home'));\nconst PlanUnit = asyncComponent(() => import('../pages/plan/Home'));\nconst NoMatch = asyncComponent(() => import('../pages/common/NoMatch'));\n\nconst configRoutes = [\n  {\n    path: '/',\n    exact: true,\n    main: App,\n  },\n  {\n    path: ['/console', '/console/:str'],\n    exact: true,\n    main: ConsoleUnit,\n  },\n  {\n    path: ['/plan', '/plan/:str'],\n    exact: true,\n    main: PlanUnit,\n  },\n  {\n    path: '/demo',\n    exact: true,\n    main: Demo,\n  },\n  {\n    path: '*',\n    exact: true,\n    main: NoMatch,\n  }\n];\n\nconst Routes = () => (\n  <Provider {...stores}>\n    <Router>\n      <Switch>\n        {\n          configRoutes.map((route, index) => {\n            return <Route key={index} exact={route.exact} path={route.path} component={route.main} />\n          })\n        }\n      </Switch>\n    </Router>\n  </Provider>\n)\n\n// Routes.propTypes = {\n//   text: PropTypes.any\n// };\n\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n * @Descripttion: \n * @Author: qingzi.wang\n * @Date: 2020-06-08 18:03:19\n */ \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/app.less';\nimport './routes/global';\nimport Routes from './routes/index';\nimport * as serviceWorker from './serviceWorker';\nimport { ConfigProvider } from 'antd';\nimport zhCN from 'antd/es/locale/zh_CN';\n\nimport 'dayjs/locale/zh-cn';\n\n// 安全模式下，有些第三方未按规定使用\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Routes />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<ConfigProvider locale={zhCN}><Routes /></ConfigProvider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}